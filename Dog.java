/**
 * To support an individual dog
 * @author law37
 * @version 1.1 (26th March 2018)
 */
public class Dog extends Animal{
	private boolean likesBones;
	private boolean walk;

	/**
	 * Constructor for the dog
     * @param name the dogs name
     * @param favFood favorite food
     * @param meals meals per day
	 * @param likeBones Does the dog like bones?
     * @param walk Does the dog need a walk?
     * @param type confirmation that it is indeed a dog
	 */
	public Dog(String name, String favFood, int meals, boolean likeBones, boolean walk, String type) {
	    super(name, favFood,meals, type);
		this.likesBones = likeBones;
		this.walk = walk;
		this.type = "DOG";
	}

    /**
     * gets the name of the dog
     * @return name
     */
	public String getName() {
		return name;
	}
	
	/**
	 * Returns a copy of the original owners
	 * @return A copy of the original owners as an array
	 */
	@Override
     public boolean isLikesBones() {
        return likesBones;
    }

    /**
     * checks if the animal can go on walks
     * @return walk
     */
	@Override
    public boolean isWalk() {
        return walk;
    }


    /**
	 * Note that this only compares equality based on a
	 * dog's name.
	 * @param obj the other dog to compare against.
	 */
	@Override
	public boolean equals(Object obj) { // Generated by IDE to be more robust
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Dog other = (Dog) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}
}
